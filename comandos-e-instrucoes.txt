# Configuração do usuário
git config --global user.name "<nome-do-usuário>"
git config --global user.email "<email-do-usuário>"
git config --list
__________________________________________________________

# Criação de um repositório local
git init
dir -a
__________________________________________________________

# Adicionando alterações
git status
git add <nome-do-arquivo>
git add --all
git add -A
git add .
__________________________________________________________

# Salvando alterações
git commit -m "<mensagem-do-commit>"
__________________________________________________________

# Funcionamento do GIT

Working directory -> Pasta onde estou trabalhando
- Untracked (não rastreado)
	* Modificados
	* Excluídos
	* Adicionados

------------------------ git add ------------------------

Staging area (staged) -> Área de preparação
- Tracked (rastreado)
	* Preparado para ser versionado

----------------------- git commit -----------------------

Committed -> Versão criada
- Commitado (versionado)
	* Arquivos salvos 
__________________________________________________________

# Visualizar alterações

-> Alterações not staged (antes do add)
git diff

-> Alterações staged (depois do add)
git diff --cached
git diff --staged

OBS: Para sair do diff, pressione q
__________________________________________________________

# Histórico de alterações

> Todas as alterações em várias linhas cada uma
git log

-> Saída
>> Na primeira linha, hash de identificação do commit
>>>> HEAD é um ponteiro que aponta para a última modificação em uma branch
>> Na segunda linha, autor do commit
>> Na terceira linha, data e hora do commit
>> Por último, mensagem do commit

commit 726530495b2fb5f963b0c944b67585a9c69e1bb2 (HEAD -> master)
Author: Jussara Rodrigues <jussara.rodrigues10@hotmail.com>
Date:   Mon Sep 7 16:51:41 2020 -0300

    Corrigir explicacoes do uso do git diff

> Todas as alterações em uma linha cada uma
git log --oneline
-> Saída
7265304 (HEAD -> master) Corrigir explicacoes do uso do git diff
a41f21c Adicionar arquivo de comandos e instrucoes

> Faz a listagem de logs limitado a N registros
git log -n

> Mostra as mudanças de cada arquivo de acordo com o commit. 
> É como se fosse feito um git diff em cada commit
git log -p

> Mostra a quantidade de alterações em cada arquivo em formato visual, 
> sem mostrar as mudanças específicas
git log --stat

> Mostra somente a quantidade de alteração de forma menos visual que --stat
git log --shortstat

> Mostra a lista de arquivos modificados em cada commit
git log --name-only

> Mostra a lista de arquivos modificados em cada commit e para cada arquivo 
mostra as letras M, A ou D.
> M - Arquivo modificado > A - Arquivo adicionado > D - Arquivo removido
git log --name-status 

> Faz exatamente igual ao comando git log, porém mostra somente poucos 
> caracteres do commit, ao invés de todos os 40.
git log --abbrev-commit

> Mostra os commits com a data relativa comparado a data do dia atual. 
> Ao invés de mostrar a data em que foi feita, mostra quanto tempo atrás 
> foi feito. Ex: 2 dias atrás
git log --relative-date

> Mostra apenas os commits do autor especificado
git log --author "<nome-do-autor>"

> Mostra os commits realizados após a data especificada
git log --since="<date>"
git log --after="<date>"

> Mostra os commits realizados antes a data especificada
git log --until="<date>" 
git log --before="<date>"


OBS: Commits são listados dos mais recentes para mais antigos.

__________________________________________________________

# Usando commits anteriores

> O repositório volta ao estado do commit informado (modo detached HEAD)
> O comando faz o HEAD apontar para o commit informado (não é definitivo)
> É útil quando queremos verificar em que momento o erro no projeto surgiu
git checkout <hash-do-commit>

> Para sair desse commit e voltar ao commit atual
> Nome da branch -> master
git checkout <nome-da-branch>

OBS: Basta escrever os 6 primeiros caracteres do hash.

__________________________________________________________

# Desfazendo alterações


__________________________________________________________

# Desfazendo alterações não rastreadas

__________________________________________________________

# Ignorando arquivos


__________________________________________________________

# Clonando repositórios

